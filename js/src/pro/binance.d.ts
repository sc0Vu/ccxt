import binanceRest from '../binance.js';
import { Int, OrderSide, OrderType, Str, Strings, Trade } from '../base/types.js';
import Client from '../base/ws/Client.js';
export default class binance extends binanceRest {
    describe(): any;
    requestId(url: any): any;
    stream(type: any, subscriptionHash: any): string;
    watchOrderBook(symbol: string, limit?: Int, params?: {}): Promise<any>;
    watchOrderBookForSymbols(symbols: string[], limit?: Int, params?: {}): Promise<any>;
    fetchOrderBookSnapshot(client: any, message: any, subscription: any): Promise<void>;
    handleDelta(bookside: any, delta: any): void;
    handleDeltas(bookside: any, deltas: any): void;
    handleOrderBookMessage(client: Client, message: any, orderbook: any): any;
    handleOrderBook(client: Client, message: any): void;
    handleOrderBookSubscription(client: Client, message: any, subscription: any): void;
    handleSubscriptionStatus(client: Client, message: any): any;
    watchTradesForSymbols(symbols: string[], since?: Int, limit?: Int, params?: {}): Promise<any>;
    watchTrades(symbol: string, since?: Int, limit?: Int, params?: {}): Promise<any>;
    parseTrade(trade: any, market?: any): Trade;
    handleTrade(client: Client, message: any): void;
    watchOHLCV(symbol: string, timeframe?: string, since?: Int, limit?: Int, params?: {}): Promise<any>;
    watchOHLCVForSymbols(symbolsAndTimeframes: string[][], since?: Int, limit?: Int, params?: {}): Promise<import("../base/types.js").Dictionary<import("../base/types.js").Dictionary<import("../base/types.js").OHLCV[]>>>;
    handleOHLCV(client: Client, message: any): void;
    watchTicker(symbol: string, params?: {}): Promise<any>;
    watchTickers(symbols?: Strings, params?: {}): Promise<any>;
    parseWsTicker(message: any, marketType: any): {
        symbol: string;
        timestamp: any;
        datetime: string;
        high: number;
        low: number;
        bid: number;
        bidVolume: number;
        ask: number;
        askVolume: number;
        vwap: number;
        open: number;
        close: number;
        last: number;
        previousClose: number;
        change: number;
        percentage: number;
        average: any;
        baseVolume: number;
        quoteVolume: number;
        info: any;
    };
    handleTicker(client: Client, message: any): void;
    handleTickers(client: Client, message: any): void;
    signParams(params?: {}): any;
    authenticate(params?: {}): Promise<void>;
    keepAliveListenKey(params?: {}): Promise<void>;
    setBalanceCache(client: Client, type: any): any;
    loadBalanceSnapshot(client: any, messageHash: any, type: any): Promise<void>;
    fetchBalanceWs(params?: {}): Promise<any>;
    handleBalanceWs(client: Client, message: any): void;
    watchBalance(params?: {}): Promise<any>;
    handleBalance(client: Client, message: any): void;
    checkIsSpot(method: string, symbol: string, params?: {}): void;
    createOrderWs(symbol: string, type: OrderType, side: OrderSide, amount: number, price?: number, params?: {}): Promise<any>;
    handleOrderWs(client: Client, message: any): void;
    handleOrdersWs(client: Client, message: any): void;
    editOrderWs(id: string, symbol: string, type: OrderType, side: OrderSide, amount: number, price?: number, params?: {}): Promise<any>;
    handleEditOrderWs(client: Client, message: any): void;
    cancelOrderWs(id: string, symbol?: Str, params?: {}): Promise<any>;
    cancelAllOrdersWs(symbol?: Str, params?: {}): Promise<any>;
    fetchOrderWs(id: string, symbol?: Str, params?: {}): Promise<any>;
    fetchOrdersWs(symbol?: Str, since?: Int, limit?: Int, params?: {}): Promise<any>;
    fetchOpenOrdersWs(symbol?: Str, since?: Int, limit?: Int, params?: {}): Promise<any>;
    watchOrders(symbol?: Str, since?: Int, limit?: Int, params?: {}): Promise<any>;
    parseWsOrder(order: any, market?: any): import("../base/types.js").Order;
    handleOrderUpdate(client: Client, message: any): void;
    watchPositions(symbols?: Strings, since?: Int, limit?: Int, params?: {}): Promise<any>;
    setPositionsCache(client: Client, type: any, symbols?: Strings): void;
    loadPositionsSnapshot(client: any, messageHash: any, type: any): Promise<void>;
    handlePositions(client: any, message: any): void;
    parseWsPosition(position: any, market?: any): import("../base/types.js").Position;
    fetchMyTradesWs(symbol?: Str, since?: Int, limit?: Int, params?: {}): Promise<any>;
    handleTradesWs(client: Client, message: any): void;
    watchMyTrades(symbol?: Str, since?: Int, limit?: Int, params?: {}): Promise<any>;
    handleMyTrade(client: Client, message: any): void;
    handleOrder(client: Client, message: any): void;
    handleAcountUpdate(client: any, message: any): void;
    handleWsError(client: Client, message: any): void;
    handleMessage(client: Client, message: any): any;
}
